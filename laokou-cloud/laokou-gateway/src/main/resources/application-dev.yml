server:
  address: 127.0.0.1
  port: 5555
  tomcat:
    connection-timeout: 18000000

spring:
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 5
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual
      missing-topics-fatal: false
  redis:
    host: 127.0.0.1
    port: 6379
    timeout: 6000ms #连接超时时长（毫秒）
    lettuce:
      pool:
        max-active: -1 #连接池最大连接数（使用负值表示无极限）
        max-wait: -1 #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 10 #连接池最大空闲连接
        min-idle: 5 #连接池最小空间连接
  boot:
    admin:
      client:
        url: http://127.0.0.1:5000/monitor
        username: ENC(7j+MYBNM2fhq8WST3DE3WA==)
        password: ENC(nj35dMcOWEmR5EASEZR3yfaT4IdT9TPm)
        instance:
          service-base-url: http://127.0.0.1:${server.port}

logging:
  file:
    name: logs/${spring.application.name}/info.log

app:
  id: gateway # 应用全局唯一的身份标识
apollo:
  cacheDir: config # 自定义本地配置文件缓存路径
  bootstrap:
    namespaces: application-common-redis,application
    enabled: true # 设置在应用启动阶段就加载 Apollo 配置
    eagerLoad:
      enabled: true

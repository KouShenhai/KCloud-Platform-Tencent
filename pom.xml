<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.laokou</groupId>
    <artifactId>laokou-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <description>parent配置</description>
    <packaging>pom</packaging>
    <modules>
        <module>laokou-common</module>
        <module>laokou-cloud</module>
        <module>laokou-service</module>
    </modules>
    <properties>
        <laokou.version>1.0-SNAPSHOT</laokou.version>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <maven-compiler-plugin>2.0.2</maven-compiler-plugin>
        <!--boot版本-->
        <spring-boot.version>3.0.0</spring-boot.version>
        <!--cloud版本-->
        <spring-cloud.version>2022.0.0-RC2</spring-cloud.version>
        <!--kotlin版本-->
        <kotlin.version>1.7.10</kotlin.version>
        <docker.repostory>registry.cn-hangzhou.aliyuncs.com</docker.repostory>
        <docker.registry.name>koushenhai</docker.registry.name>
        <docker.version>1.2.2</docker.version>
        <!--spring版本-->
        <spring.version>6.0.0</spring.version>
        <!--cloud-tencent版本-->
        <spring-cloud-tencent.version>1.8.2-2022.0.0-RC2</spring-cloud-tencent.version>
    </properties>
    <dependencyManagement>
        <dependencies>
            <!-- 定义公共版本 -->
            <dependency>
                <groupId>org.laokou</groupId>
                <artifactId>laokou-common-bom</artifactId>
                <version>${laokou.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 定义 spring boot 版本 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 定义 spring cloud 版本 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 定义 spring cloud tencent 版本 -->
            <dependency>
                <groupId>com.tencent.cloud</groupId>
                <artifactId>spring-cloud-tencent-dependencies</artifactId>
                <version>${spring-cloud-tencent.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 定义spring security 版本 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>${spring.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <repositories>
        <repository>
            <id>lib-m</id>
            <name>Spring Lib M</name>
            <url>https://repo.spring.io/libs-milestone/</url>
        </repository>
        <repository>
            <id>sonatype</id>
            <name>Spring Milestone Repository</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </repository>
        <!--里程版-->
        <repository>
            <id>spring-milestone</id>
            <name>Spring Milestone Repository</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
        <!--发行版-->
        <repository>
            <id>springsource-repos</id>
            <name>SpringSource Repository</name>
            <url>https://repo.spring.io/release/</url>
        </repository>
        <!--阿里maven镜像-->
        <!--配置maven阿里云仓库开始,不用去改maven的setting -->
        <repository>
            <id>public</id>
            <name>local private nexus</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>local private nexus</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>spring-snapshots</id>
            <url>https://repo.spring.io/snapshot</url>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <url>https://repo.spring.io/milestone</url>
        </pluginRepository>
    </pluginRepositories>
    <!--配置maven阿里云结束 -->
    <profiles>
        <!--开发环境-->
        <profile>
            <id>dev</id>
            <properties>
                <profile.active>dev</profile.active>
                <mybatis-plus.log-impl>org.apache.ibatis.logging.stdout.StdOutImpl</mybatis-plus.log-impl>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!--测试环境-->
        <profile>
            <id>test</id>
            <properties>
                <profile.active>test</profile.active>
                <mybatis-plus.log-impl>org.apache.ibatis.logging.stdout.StdOutImpl</mybatis-plus.log-impl>
            </properties>
        </profile>
        <!--正式环境-->
        <profile>
            <id>prod</id>
            <properties>
                <profile.active>prod</profile.active>
                <mybatis-plus.log-impl>org.apache.ibatis.logging.nologging.NoLoggingImpl</mybatis-plus.log-impl>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.version}</version>
                <configuration>
                    <!--        推送至阿里云Docker仓库            -->
                    <serverId>docker-aliyun</serverId>
                    <registryUrl>${docker.repostory}</registryUrl>
                    <pushImage>true</pushImage>
                    <!--指定生成的镜像名 推送阿里云镜像仓库用 -->
                    <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
                    <!-- 指定 Dockerfile 路径 , 根据实际情况改动! ${project.basedir}：项目根路径-->
                    <dockerDirectory>${project.basedir}/doc/docker</dockerDirectory>
                    <dockerHost>http://192.168.62.137:2375</dockerHost>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.artifactId}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <configuration>
                    <jvmTarget>${java.version}</jvmTarget>
                    <javaParameters>true</javaParameters>
                    <compilerPlugins>
                        <plugin>all-open</plugin>
                        <plugin>spring</plugin>
                        <plugin>no-arg</plugin>
                        <plugin>jpa</plugin>
                    </compilerPlugins>
                    <pluginOptions>
                    </pluginOptions>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-noarg</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <!-- profile对资源的操作 -->
        <resources>
            <!--打包的时候先去掉所有的配置文件-->
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application*.yml</exclude>
                    <exclude>application*.properties</exclude>
                </excludes>
            </resource>
            <!--添加需要包含的文件-->
            <resource>
                <directory>src/main/resources</directory>
                <!-- 是否替换yml或者properties里@xx@表示的maven properties属性值 -->
                <filtering>true</filtering>
                <!--在打包的时候，根据-P参数，加上需要的yml配置文件-->
                <includes>
                    <include>application.yml</include>
                    <include>application-${profile.active}.yml</include>
                    <include>application-${profile.active}.properties</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>
